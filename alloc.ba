include "sys";

u64 _MMapThreshold = 0x20000;
u64 _ChunkSize = 0x4000;
u64 _BrkAlign = 16;

void* _BreakPtr = 0;
void* _FirstBasePtr = 0;
void* _BasePtr = 0;

# Note: _HeaderSz and _FooterSz must be aligned to _BrkAlign
u64 _HeaderSz = 2u * $u64; # header: { size, allocation flag }
u64 _FooterSz = 2u * $u64; # footer: { size, [padding] }
u64 _Overhead = _HeaderSz + _FooterSz;

u64 _DevZeroThreshold = 0x2000;

void* Alloc(u64 itemSize, u64 itemCount = 1) {
	u64 size = itemCount * itemSize;
	# TODO: Return 0 for overflow, in assembly this can be done by a flag check

	u64 chunkAlignedSize = 
		(_Overhead + size + _ChunkSize - 1u) & ~(_ChunkSize - 1u);
	if !chunkAlignedSize, chunkAlignedSize = _BrkAlign;

	if chunkAlignedSize >= _MMapThreshold {
		void* base = MMap(, chunkAlignedSize, 0x3, 0x22);
		[base~u64*,0] = chunkAlignedSize - _Overhead;
		[base~u64*,1] = 1; # allocation flag
		# No need to set footer as memory is non-contiguous
		return base + _HeaderSz;
	}
	else {
		u64 newSize = (size + _BrkAlign - 1u) & ~(_BrkAlign - 1u);

		if !_BreakPtr {
			_FirstBasePtr = Brk();
			_BasePtr = _FirstBasePtr;
			_BreakPtr = Brk(_FirstBasePtr + _Overhead);
			[_BreakPtr~u64*,-4] = 0; # (in header) size
			[_BreakPtr~u64*,-3] = 1; # (in header) allocation flag
			# Useless to set the footer as this is the last block
		}
		else {
			while [_BasePtr~u64*,0] { # next block has size?
				u64 blockSize = [_BasePtr~u64*,0];
				# Check if next block is unallocated and has enough space
				if ![_BasePtr~u64*,1] && blockSize >= newSize {
					[_BasePtr~u64*,0] = newSize;
					[_BasePtr~u64*,1] = 1;
					void* footer = (_BasePtr + _HeaderSz + newSize)~void*;
					[footer~u64*,0] = newSize;

					# Split the old block in two if there is some extra space
					u64 extraSize = blockSize - newSize - _Overhead;
					if extraSize >= _BrkAlign {
						void* split = (footer + _FooterSz)~void*;
						footer = (split + _HeaderSz + extraSize)~void*;
						[split~u64*,0] = extraSize;
						[split~u64*,1] = 0;
						[footer~u64*,0] = extraSize;
					}

					return _BasePtr + _HeaderSz;
				}
				_BasePtr += (_Overhead + blockSize)~void*;
			}
		}

		# No space found, so extend
		void* ptr = (_BreakPtr - _FooterSz)~void*;
		[ptr~u64*,-2] = newSize;
		[ptr~u64*,-1] = 1;
		_BreakPtr = Brk(_BreakPtr + newSize + _Overhead);
		# Program break didn't change, i.e. didn't allocate
		if _BreakPtr == ptr + _FooterSz, return 0;
		[_BreakPtr~u64*,-6] = newSize;
		[_BreakPtr~u64*,-4] = 0;
		[_BreakPtr~u64*,-3] = 1;
		_BasePtr = (_BreakPtr - _Overhead)~void*;

		return ptr;
	}
}

void Free(void* ptr) {
	void* base = (ptr - _HeaderSz)~void*;
	if ![base~u64*,1], return; # Already deallocated
	[base~u64*,1] = 0;
	u64 size = [base~u64*,0];
	if size >= _MMapThreshold {
		MUnmap(base, size + _Overhead);
	}
	else {
		if !_BreakPtr, return;
		if base < _BasePtr, _BasePtr = base;
		
		# Coalesce

		u64 prevSize = 0;
		void* prevBase = 0;
		bool isPrevAllocated = 1;
		if base > _FirstBasePtr {
			prevSize = [base~u64*,-2];
			prevBase = (base - prevSize - _Overhead)~void*;
			isPrevAllocated = [prevBase~u64*,1]; # TODO: fix
		}

		void* nextBase = (base + size + _Overhead)~void*;
		bool isNextAllocated = 1;
		if nextBase < _BreakPtr - _Overhead,
			isNextAllocated = [nextBase~u64*,1];

		if isPrevAllocated {
			if !isNextAllocated {
				size += [nextBase~u64*,0] + _Overhead;
				void* footer = (base + size + _HeaderSz)~void*;
				[base~u64*,0] = size;
				[footer~u64*,0] = size;
			}
		}
		elif isNextAllocated {
			size += [prevBase~u64*,0] + _Overhead;
			void* footer = (prevBase + size + _HeaderSz)~void*;
			[prevBase~u64*,0] = size;
			[footer~u64*,0] = size;
			if prevBase < _BasePtr, _BasePtr = prevBase;
		}
		else {
			size += [prevBase~u64*,0] + [nextBase~u64*,0] + _Overhead;
			void* footer = (prevBase + size + _HeaderSz)~void*;
			[prevBase~u64*,0] = size;
			[footer~u64*,0] = size;
			if prevBase < _BasePtr, _BasePtr = prevBase;
		}
	}
}

void* CAlloc(u64 itemSize, u64 itemCount = 1) {
	void* ptr = Alloc(itemSize, itemCount);
	if !ptr, return 0;

	u64 size = [ptr~u64*,-2];

	# MMap initializes memory to zero
	if size + _Overhead < _MMapThreshold {
		if size + _Overhead >= _DevZeroThreshold {
			i64 fd = Open(&"/dev/zero", 0);
			Read(ptr, size, fd);
			Close(fd);
		}
		else {
			MemSet(ptr, 0, size);
		}
	}

	return ptr;
}

# TODO: this one makes a lot of calls, so it can likely be done more efficiently
void* Realloc(void* ptr, u64 itemSize, u64 itemCount = 1) {
	u64 oldSize = [ptr~u64*,-2];
	bool isFreed = 0;
	
	if oldSize + _Overhead >= _MMapThreshold {
		MUnmap(ptr - _HeaderSz, oldSize + _Overhead);
		isFreed = 1;
	}

	u64 size = itemCount * itemSize;
	# TODO: Return 0 for overflow, in assembly this can be done by a flag check

	u64 chunkAlignedSize = 
		(_Overhead + size + _ChunkSize - 1u) & ~(_ChunkSize - 1u);
	if !chunkAlignedSize, chunkAlignedSize = _BrkAlign;

	if chunkAlignedSize >= _MMapThreshold {
		if !isFreed, Free(ptr);
		void* base = MMap(, chunkAlignedSize, 0x3, 0x22);
		[base~u64*,0] = chunkAlignedSize - _Overhead;
		[base~u64*,1] = 1; # allocation flag
		# No need to set footer as memory is non-contiguous
		return base + _HeaderSz;
	}
	else {
		if !isFreed {
			u64 newSize = (size + _BrkAlign - 1u) & ~(_BrkAlign - 1u);
			void* base = (ptr - _HeaderSz)~void*;
			void* nextBase = (base + oldSize + _Overhead)~void*;
			bool isNextAllocated = 1;
			if nextBase < _BreakPtr - _Overhead,
				isNextAllocated = [nextBase~u64*,1];
			
			# If there is enough space to reallocate in place, do it
			if !isNextAllocated {
				u64 nextSize = [nextBase~u64*,0];
				if _BasePtr == nextBase, _BasePtr = _FirstBasePtr; # ouch
				if newSize <= nextSize + oldSize + _Overhead {
					[base~u64*,0] = newSize;
					[base~u64*,1] = 1;
					void* footer = (base + _HeaderSz + newSize)~void*;
					[footer~u64*,0] = newSize;

					# Split the old block in two if there is some extra space
					u64 extraSize = nextSize + oldSize - newSize;
					if extraSize >= _BrkAlign {
						void* split = (footer + _FooterSz)~void*;
						footer = (split + _HeaderSz + extraSize)~void*;
						[split~u64*,0] = extraSize;
						[split~u64*,1] = 0;
						[footer~u64*,0] = extraSize;
					}
					return ptr;
				}
			}
			Free(ptr);
		}
		void* p = Alloc(itemSize, itemCount);
		return p;
	}
}

