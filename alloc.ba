include "sys";

u64 _MMapThreshold = 0x20000;
u64 _ChunkSize = 0x4000; # 16 kB, Arbitrary
u64 _BrkAlign = 16;

void* _BreakPtr = 0;
void* _FirstBasePtr = 0;
void* _BasePtr = 0;

# Note: _HeaderSz and _FooterSz must be aligned to _BrkAlign
u64 _HeaderSz = 2u * $u64; # header: { size, allocation flag }
u64 _FooterSz = 2u * $u64; # footer: { size, [padding] }
u64 _Overhead = _HeaderSz + _FooterSz;

void* Alloc(u64 itemSize, u64 itemCount = 1) {
	u64 size = itemCount * itemSize;
	# TODO: Return 0 for overflow, in assembly this can be done by a flag check

	u64 chunkAlignedSize = 
		(_Overhead + size + _ChunkSize - 1u) & ~(_ChunkSize - 1u);
	if !chunkAlignedSize, chunkAlignedSize = _BrkAlign;

	if chunkAlignedSize >= _MMapThreshold {
		void* base = MMap(, chunkAlignedSize, 0x3, 0x22);
		[base~u64*,0] = chunkAlignedSize - _Overhead;
		[base~u64*,1] = 1; # allocation flag
		# No need to set footer as memory is non-contiguous
		return base + _HeaderSz;
	}
	else {
		u64 newBlockSize = (size + _BrkAlign - 1u) & ~(_BrkAlign - 1u);

		if !_BreakPtr {
			_FirstBasePtr = Brk();
			_BasePtr = _FirstBasePtr;
			_BreakPtr = Brk(_FirstBasePtr + _Overhead);
			[_BreakPtr~u64*,-4] = 0; # (in header) size
			[_BreakPtr~u64*,-3] = 1; # (in header) allocation flag
			# Useless to set the footer as this is the last block
		}
		else {
			while [_BasePtr~u64*,0] { # next block has size?
				u64 oldBlockSize = [_BasePtr~u64*,0];
				# Check if next block is unallocated and has enough space
				if ![_BasePtr~u64*,1] && oldBlockSize >= newBlockSize {
					u64 extraSize = oldBlockSize - newBlockSize - _Overhead;
					# Split the old block in two if there is some extra space
					if extraSize >= _BrkAlign {
						void* footer = 
							(_BasePtr + _HeaderSz + newBlockSize)~void*;
						[_BasePtr~u64*,0] = newBlockSize;
						[footer~u64*,0] = newBlockSize;

						void* split = (footer + _FooterSz)~void*;
						footer = (split + _HeaderSz + extraSize)~void*;
						[split~u64*,0] = extraSize;
						[split~u64*,1] = 0;
						[footer~u64*,0] = extraSize;
					}
					[_BasePtr~u64*,1] = 1;
					return _BasePtr + _HeaderSz;
				}
				_BasePtr += (_Overhead + oldBlockSize)~void*;
			}
		}

		# No space found, so extend
		void* ptr = (_BreakPtr - _FooterSz)~void*;
		[ptr~u64*,-2] = newBlockSize;
		[ptr~u64*,-1] = 1;
		_BreakPtr = Brk(_BreakPtr + newBlockSize + _Overhead);
		# Program break didn't change, i.e. didn't allocate
		if _BreakPtr == ptr + _FooterSz, return 0;
		[_BreakPtr~u64*,-6] = newBlockSize;
		[_BreakPtr~u64*,-4] = 0;
		[_BreakPtr~u64*,-3] = 1;
		_BasePtr = (_BreakPtr - _Overhead)~void*;

		return ptr;
	}
}

void Free(void* ptr) {
	void* base = (ptr - _HeaderSz)~void*;
	if ![base~u64*,1], return; # Already deallocated
	[base~u64*,1] = 0;
	u64 size = [base~u64*,0];
	if size >= _MMapThreshold {
		MUnmap(base, size + _Overhead);
	}
	else {
		if !_BreakPtr || base <= _FirstBasePtr, return;

		if base < _BasePtr, _BasePtr = base;
		
		# Coalesce
		u64 prevSize = [base~u64*,-2];
		void* prevBase = (base - prevSize - _Overhead)~void*;
		bool isPrevAllocated = [prevBase~u64*,1];
		void* nextBase = (base + size + _Overhead)~void*;
		bool isNextAllocated = 1;
		if nextBase < _BreakPtr - _Overhead,
			isNextAllocated = [nextBase~u64*,1];

		if isPrevAllocated {
			if isNextAllocated {
				size += [prevBase~u64*,0] + [nextBase~u64*,0] + _Overhead;
				void* footer = (prevBase + size + _HeaderSz)~void*;
				[prevBase~u64*,0] = size;
				[footer~u64*,0] = size;
				if prevBase < _BasePtr, _BasePtr = prevBase;
			}
			else {
				size += [nextBase~u64*,0] + _Overhead;
				void* footer = (base + size + _HeaderSz)~void*;
				[base~u64*,0] = size;
				[footer~u64*,0] = size;
			}
		}
		elif isNextAllocated {
			size += [prevBase~u64*,0] + _Overhead;
			void* footer = (prevBase + size + _HeaderSz)~void*;
			[prevBase~u64*,0] = size;
			[footer~u64*,0] = size;
			if prevBase < _BasePtr, _BasePtr = prevBase;
		}
	}
}

void* CAlloc(u64 itemSize, u64 itemCount = 1) {
	# TODO
	return 0;
}

void* Realloc(void* ptr, u64 itemSize, u64 itemCount = 1) {
	# TODO
	return 0;
}

